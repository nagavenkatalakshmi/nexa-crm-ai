from fastapi import FastAPI
from fastapi.responses import HTMLResponse
from Standard_Visualization_Service import Standard_Visualization_Service
from Custom_Visualization import Custom_Visualization
from pydantic import BaseModel
from Auto_Completion.Auto_Completion import Auto_Completion
from fastapi.middleware.cors import CORSMiddleware

app1 = FastAPI()
origins = [
    "http://localhost:3000","https://api.dev.ai.crm.nexadesign.ai","https://api.dev.crm.nexadesign.ai", "https://dev.crm.nexadesign.ai/", "https://ai.crm.nexadesign.ai"  # React dev server
]

app1.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

svs = Standard_Visualization_Service()

prompt = """
You have a dataset df with columns (Note- don't use any csv we already have database use that database df).
1. Before visualization make sure data is clean
2. Give me cluster column chart for leadStatus and createdAt but only take Opportunity, Warm Lead, Cold Lead, and Visited categories from leadStatus using Plotly for dynamic visualization.
3. Display Stacked bar chart for techStack and classMode using Plotly for dynamic visualization.
4. Give stacked bar chart for leadStatus and leadSource using Plotly for dynamic visualization.
5. Need a Horizontal bar chart for leadSource to count the number of leads generated by the leadSource mention leadSource in y-axis using Plotly for dynamic visualization.
Ensure each plot has titles, labels, colors, and borders to enhance clarity and aesthetics. Utilize a white template for the plots.
Provide only code without comments or instructions.
Save all these dynamic visualizations as a file or supported format with the following names:
- cluster_column_chart.html
- stacked_bar_chart_techstack_classmode.html
- stacked_bar_chart_leadstatus_leadsource.html
- horizontal_bar_chart.html
Display in web browser. Note: The dataset df is already defined and available for use.
"""
@app1.get("/")
async def root():
    svs.process_visualization_code(prompt, file_name='visualization_code.py')
    return {"message": "Welcome to the Standard Visualization Service"}

@app1.get("/First_visualization")
async def open_html_file_one():
    file_name_1 = "stacked_bar_chart_leadstatus_createdAt.html"
    return HTMLResponse(content=open(file_name_1, 'r', encoding='utf-8').read(), status_code=200)

@app1.get("/Second_visualization")
async def open_html_file_two():
    file_name_2 = "Continous_stacked_bar_chart_techstack_classmode.html"
    return HTMLResponse(content=open(file_name_2, 'r', encoding='utf-8').read(), status_code=200)

@app1.get("/Third_visualization")
async def open_html_file_three():
    file_name_3 = "Mosaic_plot_leadstatus_leadsource.html"
    return HTMLResponse(content=open(file_name_3, 'r', encoding='utf-8').read(), status_code=200)

@app1.get("/Fourth_visualization")
async def open_html_file_four():
    file_name_4 = "pie_chart.html"
    return HTMLResponse(content=open(file_name_4, 'r', encoding='utf-8').read(), status_code=200)

class Item(BaseModel):
    prompt: str = ""
    lead_id: int

@app1.post("/prompt/")
async def create_item(item: Item):
    try:
        note_promp = Auto_Completion(item)
        print("ðŸš€ ~ note_promp:", note_promp.whole_sentence())
        return note_promp.whole_sentence()
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

app1.include_router(Custom_Visualization.router)










